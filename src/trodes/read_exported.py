#!/usr/bin/env python3
"""
"""
import os
import warnings
import re
from collections import defaultdict
import numpy as np

def parse_exported_file(file_path):
    """
    """
    with open(file_path, 'rb') as f:
        # Check if first line is start of settings block
        if f.readline().decode('ascii').strip() != '<Start settings>':
            raise Exception("Settings format not supported")
        fields = True
        fields_text = {}
        for line in f:
            # Read through block of settings
            if fields:
                line = line.decode('ascii').strip()
                # filling in fields dict
                if line != '<End settings>':
                    vals = line.split(': ')
                    fields_text.update({vals[0].lower(): vals[1]})
                # End of settings block, signal end of fields
                else:
                    fields = False
                    dt = parse_fields(fields_text['fields'])
                    fields_text['data'] = np.zeros([1], dtype = dt)
                    break
        # Reads rest of file at once, using dtype format generated by parse_fields()
        dt = parse_fields(fields_text['fields'])
        data = np.fromfile(f, dt)
        fields_text.update({'data': data})
        return fields_text

# Parses last fields parameter (<time uint32><...>) as a single string
# Assumes it is formatted as <name number * type> or <name type>
# Returns: np.dtype
def parse_fields(field_str):
    """
    """
    # Returns np.dtype from field string
    sep = re.split('\s', re.sub(r"\>\<|\>|\<", ' ', field_str).strip())
    # print(sep)
    typearr = []
    # Every two elmts is fieldname followed by datatype
    for i in range(0,sep.__len__(), 2):
        fieldname = sep[i]
        repeats = 1
        ftype = 'uint32'
        # Finds if a <num>* is included in datatype
        if sep[i+1].__contains__('*'):
            temptypes = re.split('\*', sep[i+1])
            # Results in the correct assignment, whether str is num*dtype or dtype*num
            ftype = temptypes[temptypes[0].isdigit()]
            repeats = int(temptypes[temptypes[1].isdigit()])
        else:
            ftype = sep[i+1]
        try:
            fieldtype = getattr(np, ftype)
        except AttributeError:
            print(ftype + " is not a valid field type.\n")
            exit(1)
        else:
            typearr.append((str(fieldname), fieldtype, repeats))
    return np.dtype(typearr)

def get_key_with_substring(input_dict, substring="", return_first=True):
    """
    """
    input_dict.keys()
    keys_with_substring = []
    for key in input_dict.keys():
        if substring in key:
            keys_with_substring.append(key)
    if return_first:
        return keys_with_substring[0]
    else:
        return keys_with_substring

def update_trodes_file_to_metadata(file_path, file_to_metadata=None):
    """
    Get the data/metadata froma a Trodes recording file. Save it to a dictionary with the file name as the key. 
    And the name of the data/metadata(sub-key) and the data/metadata point(sub-value) as a subdictionary for the value. 

    Args:
        file_path(str): Path of the Trodes recording file. Can be relative or absolute path.
        file_to_metadata(dict): Dictionary that had the trodes file name as the key and the 

    Returns:
        Dictionary that has file name keys with a subdictionary of all the different data/metadata from the Trodes recording file.
    """
    
    # Creating a new dictionary is none is inputted
    if file_to_metadata is None: 
        file_to_metadata = defaultdict(dict)
    # Getting just the file name to use as the key
    file_name = os.path.basename(file_path)
    # Getting the absolute file path as metadata
    absolute_file_path = os.path.abspath(file_path)
    try:
        # Reading in the Trodes recording file with the function 
        trodes_recording = parse_exported_file(absolute_file_path)      
        file_to_metadata[file_name] = trodes_recording
        file_to_metadata[file_name]["absolute_file_path"] = absolute_file_path
        return file_to_metadata
    except:
        warnings.warn("Can not process {}".format(absolute_file_path))
        return None